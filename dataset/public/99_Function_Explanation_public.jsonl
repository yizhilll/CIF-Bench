{"Input": "void bubbleSort(int arr[], int n)", "Output": "这是一个C++函数头，函数名为bubbleSort，函数返回类型为void，意味着不返回任何值。\n参数1：arr，一个整型数组，表示要排序的原始数组。\n参数2：n，整数，用于排序arr数组中的前n个元素。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def read_csv(file_path: str, delimiter: str, encoding: str) -> pd.DataFrame:", "Output": "这是一个读取csv文件的函数，该函数将返回一个pandas DataFrame对象，包含csv文件的所有数据。\n参数1：file_path（类型为str）：表示csv文件的路径。\n参数2.：delimiter（类型为str）：表示csv文件的分隔符。\n参数3：encoding（类型为str）：表示csv文件的编码格式。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def send_email(sender:str, recipient:str, subject:str, body:str) -> bool:'", "Output": "这是名为send_email的函数，该函数返回一个布尔值表示邮件是否成功发送。\n参数1：sender， 字符串类型，发送者。参数2：recipient，字符串类型，邮件接收者。\n参数3：subject，字符串类型，邮件主题。\n参数4：body，字符串类型，邮件正文。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_distance(x1: float, y1: float, x2: float, y2: float) -> float:", "Output": "这是一个计算两点之间距离的函数，函数名是calculate_distance，函数返回值是一个浮点数，表示这两个点之间的距离。\n参数1：x1，第一个点的横坐标。\n参数2：y1，第一个点的纵坐标。\n参数3：x2，第二个点的横坐标。\n参数4：y2，第二个点的纵坐标。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "void merge(int arr[], int l, int m, int r)", "Output": "这是一个名为merge的函数，它的返回值类型为void，该函数用于将arr数组中的两个有序子数组合并成一个有序数组，其中，子数组1从l到m，子数组2从m+1到r。\n参数1：arr，整型数组，表示给定的数组。\n参数2：l，整型参数，表示给定的长度。\n参数3：m，整型参数，表示给定的第二个长度。\n参数4：r,整型参数，表示给定的第三个长度。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def print_hello(name: str) -> None:", "Output": "这是一个名为print_hello的函数，并无返回值。\n参数1：name，字符串类型，输入的名字。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_total_price(num_items: int, item_price: float, discount: Optional[float] = None) -> float:", "Output": "这是一个函数名是calculate_total_price的函数，该函数返回总价，总价是一个浮点数。\n参数1：num_items（整数类型）：表示购买商品的数量。\n参数2： item_price（浮点数类型）：表示商品单价。\n参数3：discount（浮点数类型或空值）：表示折扣金额，如果未提供则默认为空。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def addition(x: int, y: int) -> int:", "Output": "此函数名为addition，该函数将返回一个整数，表示x和y的和。\n参数1：x，整数类型，表示求和的第一个数。\n参数2：y，整数类型，表示求和的第二个数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_average(scores: List[float]) -> float:", "Output": "这是一个名为calculate_average的函数，函数会返回一个浮点数，表示这个列表中所有数的平均值。\n参数1：scores，这个参数是一个包含浮点数的列表，表示得分的数组。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_salary(hours: float, rate: float) -> float:", "Output": "这是一个名为 calculate_salary 的函数，这个函数的返回值是一个浮点型，代表薪水的计算结果。\n参数1：hours， 浮点型，表示小时数。\n参数2：rate，浮点型，表示薪资。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def search(items: List[str], target: str) -> Optional[int]:", "Output": "这是一个名为search的函数，函数将返回一个整数值，表示目标字符串在列表中的索引位置。如果目标字符串不在列表中，函数将返回None。\n参数1：items被用于存储搜索对象。\n参数2：target则表示待搜索的目标字符串。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "public double calculateDistance(double latitude1, double longitude1, double latitude2, double longitude2)", "Output": "这是函数名为calculateDistance的函数，返回值为这两个点之间的距离。\n参数1：latitude1，double 类型，表示第一个点的横坐标。\n参数2：longitude1，double 类型，表示第一个点的纵坐标。\n参数3：latitude2，double 类型，表示第二个点的横坐标。\n参数4：longitude2，double 类型，表示第二个点的纵坐标。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "public static void insertInOrder(int[] arr, int n)", "Output": "这是一个Java函数头部，函数名为insertInOrder，返回类型为void，该函数的功能是将数组arr中的前n个元素按升序插入到已排好序的数组中。\n参数1：arr，整数数组类型，表示原始的数组。\n参数2：n，整数类型，表示要按升序插入的个数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def get_max_value(lst: List[int]) -> int:", "Output": "这是一个名为get_max_value的函数，该函数的返回值为一个整数类型的变量，表示列表中的最大值。\n参数1：lst，列表类型，该列表内所有元素均为整数类型，表示给定的数组。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "int binarySearch(int arr[], int low, int high, int key)", "Output": "这是一种名为binarySearch的算法函数，用于在有序数组arr中查找元素key，该函数返回一个整数，表示元素key在有序数组中的位置，如果元素不存在则返回-1。\n参数1：arr，整型数组，表示需要被查找的有序数组。\n参数2：low，整数，表示有序数组的起始下标。\n参数3：high，整数，表示有序数组的终止下标。\n参数4：key，整数，表示需要查找的元素。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def func_name(param1: data_type1, param2: data_type2) -> return_type:", "Output": "函数名为func_name，函数的返回值类型为return_type。\n参数1：param1，data_type1表示第一个名字。\n参数2：param2，data_type2表示第二个名字。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def convert_to_int(num_str: str) -> int:", "Output": "函数名为convert_to_int，该函数将输入的字符串类型的数字转换为整数类型，并返回该整数值。函数返回值类型为int。\n参数1：num_str，类型为str，表示给定的字符串整数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def print_something(something: str) -> None:", "Output": "函数名为print_something，函数返回值为None，表示没有返回值。\n参数1：something，表示要打印的内容，参数类型为字符串（str）。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def multiply(a: float, b: float) -> float:", "Output": "函数名为multiply，函数返回值为一个float类型，用于计算两个数的乘积。\n参数1：a，浮点型类型，表示第一个乘数。\n参数2：b，浮点型类型，表示第二个乘数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_sum(num_list: List[int]) -> int:", "Output": "这是一个名为calculate_sum的函数，并且这个函数返回一个整数类型的值，表示这个列表中所有数字的总和。\n参数1：num_list，这个参数是一个整数列表，表示求和的列表。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_discounted_price(price: float, discount_rate: float) -> float", "Output": "这是一个名为calculate_discounted_price的Python函数，该函数将返回一个浮点数，代表折后价。\n参数1：price，浮点类型，代表原价。\n参数2：discount_rate，浮点类型，代表折扣率。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "int maximum(int a[], int size)", "Output": "此函数名为maximum，返回类型为整型int，函数将返回数组a[]中的最大值。\n参数1：a，整型数组，表示要求最大值的数组。\n参数2：size，整型数，用于表示数组a[]的大小。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def create_account(username: str, password: str, email: str) -> int:", "Output": "此函数名为create_account，该函数将会返回一个整型值，表示账户创建的状态。\n参数1：username，字符串类型，表示用户名。\n参数2：password，字符串类型，表示用户密码。\n参数3：email，字符串类型，表示用户邮箱。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def get_student_scores(student_id: int, subject: str) -> dict:", "Output": "函数名为get_student_scores，该函数返回一个字典数据结构，该字典包含该学生在该科目中的所有成绩。\n参数1：student_id，整数类型，表示学生ID。\n参数2：subject，字符串类型，表示科目名称。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "int calculateSum(int a, int b);", "Output": "这是一个返回类型为int的函数，函数名叫做calculateSum。\n参数1：a，int类型，表示求和的第一个整数。\n参数2：b，int类型，表示求和的第二个整数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_square(num: int) -> int:", "Output": "这是一个名为calculate_square的函数，返回一个整数类型的返回值。这个函数的功能是计算num的平方。\n参数1：num，整数类型，表示求平方的整数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_percentage(value: float, total: float) -> float:", "Output": "这个函数名为calculate_percentage，函数的返回值为一个浮点数，代表计算结果的百分比。\n参数1：value，浮点数类型，代表需要计算百分比的数值。\n参数2：total，浮点数类型，代表总数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def search(keyword: str, max_results: int = 10, sort_by: str = 'relevance') -> List[Dict[str, Union[str, int]]]:", "Output": "该函数名为search，该函数返回一个列表类型的值，列表中的每个元素是一个字典类型，字典中含有键为字符串类型的值以及键为整数类型的值。\n参数1：keyword，keyword是用于进行搜索的关键词，是一个字符串类型的参数。\n参数2：max_results，是最大返回结果数，是一个整数类型的参数，默认值为10。\n参数3：sort_by，sort_by是一个字符串类型的参数，用于指定搜索结果的排序方式，缺省值为'relevance'。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def merge_sort(arr: List[int]) -> List[int]:", "Output": "这是一个归并排序的函数，函数名是merge_sort，并返回一个已排序的整数列表。\n参数1：arr，整数列表，表示想要排序的列表。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def draw_circle(radius: int, x: int, y: int) -> None:", "Output": "这是一个名为draw_circle的函数，函数不会返回任何值。\n参数1：radius，整形，表示圆的半径大小。\n参数2：x，整形，表示圆的中心点在x轴上的位置。\n参数3：y，整形，表示圆的中心点在y轴上的位置。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_area(length: float, width: float) -> float:", "Output": "这是一个名为calculate_area的函数，这个函数返回一个浮点数类型的变量，表示矩形的面积。\n参数1：length，浮点数类型，矩形的长度。\n参数2：width，浮点数类型，矩形的宽度。 ", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def add_numbers(num1: int, num2: int) -> int:", "Output": "这是一个名为add_numbers的函数，这个函数会返回一个整数类型的值，它是num1和num2的和。\n参数1：num1，整数类型，表示求和的第一个数。\n参数2：num2，整数类型，表示求和的第二个数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "public String[] split(String regex)", "Output": "这个函数是Java中String类的一个函数，它将被调用的字符串按照给定的正则表达式进行分隔，返回分隔后得到的一个字符串数组。\n参数1：regex，字符串类型，表示要分割的字符串。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "int sum(int a, int b);", "Output": "函数名是sum，返回值类型是整数，表示两个数的和。\n参数1：a，类型：int，表示第一个求和的数。\n参数2：b，类型：int，表示第二个求和的数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def get_user_info(user_id: int, name: str) -> dict:", "Output": "这是一个名为 get_user_info 的函数，该函数的返回值类型为字典类型，该字典将包含用户信息。\n参数1：user_id ，整型，代表用户的ID。\n参数2：name，字符串类型，代表用户的名字。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def foo(bar: int, baz: float) -> str:", "Output": "该函数名为foo，函数的返回值为一个字符串类型。\n参数1：bar，整数类型，表示输入的第一个整数。\n参数2：baz，浮点类型，表示输入的第一个浮点数。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "void printMessage(string message)", "Output": "这是一个输出字符串的函数，函数名为printMessage，函数将该字符串输出到控制台上。\n参数：message，字符串类型的变量，表示要打印的信息。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "void printArray(int arr[], int n)", "Output": "这是一个 void 类型的函数，函数名称为 printArray，该函数的作用是打印给定数组 arr 中的所有元素。\n参数1： arr ，是一个整型数组，代表给定的数组。\n参数 2：n ，是整型变量，代表数组 arr 中元素的数量。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def fetch_data(url: str, headers: dict = None, timeout: float = 10.0, retries: int = 3) -> bytes:", "Output": "该函数名是fetch_data，函数返回一个bytes类型的数据。\n参数1：url，请求的地址。\n参数2：headers，参数来设置请求头信息。\n参数3：timeout，参数表示请求超时时间，单位为秒，默认为10秒。\n参数4：retries，参数表示请求失败时的重试次数，默认为3次。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "public static void printArray(int[] arr)", "Output": "这是一个公共的静态方法，返回类型为void。它的名称是printArray，该函数将打印输入参数arr的内容。\n参数1：arr，整数数组类型，表示要打印的数组。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)", "Output": "函数名为open，用来打开一个文件并返回文件对象。\n参数1：file，必填，表示文件的路径或文件描述符。\n参数2：mode，选填，表示该文件的打开模式，默认为r（只读），可选值有r（只读）、w（只写）、x（独占写）、a（追加）、b（二进制模式）、t（文本模式），可以将它们组合使用。\n参数3：buffering，选填，控制缓冲策略，0表示不缓冲，positive整数表示缓冲区大小，negative值表示使用默认缓冲区大小（-1）。\n参数4：encoding，选填，表示文件的编码方式，可以使用标准的Python编码名称，如utf-8、gbk等。\n参数5：errors，选填，表示编解码错误的处理方式，常用的是'ignore'和'replace'。\n参数6：newline，选填，表示写入文本模式时使用的换行符，可以使用None、''、'n'、'r'、'rn'。\n参数7：closefd，选填，表示传入文件描述符时是否在文件关闭时将其一同关闭，默认为True。\n参数8：opener，选填，用于打开文件的自定义方法，如果指定，则必须是callable类型的。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def count_words(sentence: str) -> int:", "Output": "函数名为count_words，该函数返回一个整型值int，表示统计sentence中单词数量。\n参数1：sentence，字符串类型，代表给定的字符串。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def get_user_info(user_id: int, include_address: bool = False, include_phone: bool = False) -> dict:", "Output": "这是一个名为get_user_info的函数，返回类型为字典(dict)类型。其中，user_id参数是必需的，表示要获取信息的用户的ID，include_address和include_phone是可选参数，分别表示是否需要返回用户的地址和电话信息。如果include_address或include_phone为True，则函数返回包含相应信息的字典。\n参数1：user_id(int类型)，用户的ID。\n参数2：include_address(bool类型，默认值为False)，是否包含用户的地址。\n参数3：include_phone(bool类型，默认值为False)，是否包含用户的手机号。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "void printMatrix(int[][] matrix)", "Output": "这是一个名为printMatrix的函数，此函数的作用是打印矩阵，使其按照行优先的顺序依次输出每个元素，每个元素之间用空格隔开，每一行末尾输出一个换行符，该函数没有返回值（即返回void）。\n参数1：matrix，该参数为一个二维整数数组，用于表示一个矩阵。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def calculate_profit(price: float, quantity: int) -> float:", "Output": "这个函数名为calculate_profit，该函数的返回值为浮点数类型，表示该交易的总收益。\n参数1：price，类型为浮点数，表示每个商品的价格。\n参数2：quantity，类型为整数，表示商品的数量。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "public double calculateAverage(int[] nums)", "Output": "这个函数名为calculateAverage，返回类型为double，功能是计算并返回传入整型数组nums的平均值。\n参数1：nums，整型数组参数，表示计算平均数的原始数组。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def create_user(name: str, age: int, email: str) -> dict:", "Output": "这是一个名为create_user的函数，该函数将返回一个字典类型的数据，其中包含有关创建的用户的详细信息。\n参数1：name（字符串类型），表示用户的姓名。\n参数2：age（整型），表示用户的年龄。\n参数3：email（字符串类型），表示用户的电子邮件地址。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def read_csv(file_path: str, delimiter: str = ',', header: bool = True) -> pandas.DataFrame:", "Output": "函数名read_csv，是这是一个读取csv文件并返回pandas DataFrame的函数。\n参数1：file_path，表示csv文件路径。参数2：delimiter，表示csv文件中的分隔符，默认为逗号。\n参数3：header，表示csv文件中是否有表头，默认为True。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "def read_csv(filename: str) -> List[List[str]]:", "Output": "这是一个名为read_csv的函数，用于指定csv文件的路径和文件名。返回一个列表类型的数据，其中每个元素为由逗号分隔的字符串组成的列表。\n参数1：filename，为一个字符串类型，代表读取csv的文件名。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
{"Input": "void printName(string name)", "Output": "这是一个无返回值的函数，函数名为printName，该函数用于打印给定的名字name。\n参数1：name，参数类型为string，表示要打印的名字。", "Instruction": "在这个任务中，你会得到一个文档函数的函数头部。你的任务是对这个函数和参数进行解释，参数需要按顺序进行解释。"}
